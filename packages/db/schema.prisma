// Simplified Prisma schema for SQLite development
// This is a temporary schema for local development only

generator client {
  provider = "prisma-client-js"
  engineType = "wasm"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  stores        Store[]
  experiments   Experiment[]
  assignments   Assignment[]
  exposures     Exposure[]
  subscription  Subscription?

  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  role           String   @default("ANALYST") // OWNER, ADMIN, ANALYST
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Store {
  id             String   @id @default(cuid())
  shopDomain     String   @unique
  accessToken    String
  scopes         String   // Comma-separated scopes
  region         String   @default("us")
  status         String   @default("ACTIVE") // ACTIVE, SUSPENDED, UNINSTALLED
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  catalogItems   CatalogItem[]
  pixelEvents    PixelEvent[]
  attributions   Attribution[]
  experiments    Experiment[]
  audienceSegments AudienceSegment[]
  creativeAssets CreativeAsset[]
  feedConfigs    FeedConfig[]
  webhookEvents  WebhookEvent[]
  jobs           Job[]
  assignments    Assignment[]
  exposures      Exposure[]

  @@map("stores")
}

model CatalogItem {
  id          String   @id @default(cuid())
  productId   String
  variantId   String?
  title       String
  handle      String
  vendor      String?
  productType String?
  tags        String   // Comma-separated tags
  images      String   // Comma-separated image URLs
  price       Float
  compareAtPrice Float?
  inventory   Int      @default(0)
  storeId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, productId, variantId])
  @@map("catalog_items")
}

model PixelEvent {
  id        String   @id @default(cuid())
  eventType String
  eventData String   // JSON string
  storeId   String
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("pixel_events")
}

model Attribution {
  id        String   @id @default(cuid())
  orderId   String
  utmSource String?
  utmMedium String?
  utmCampaign String?
  utmTerm   String?
  utmContent String?
  revenue   Float
  storeId   String
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("attributions")
}

model Experiment {
  id              String   @id @default(cuid())
  orgId           String
  storeId         String?
  key             String   @unique
  name            String
  description     String?
  status          String   @default("DRAFT") // DRAFT, RUNNING, PAUSED, COMPLETED
  startAt         DateTime?
  stopAt          DateTime?
  hashSalt        String   @default(cuid())
  guardrailMetric String?
  allocation      Int      @default(100) // Percentage allocation
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  store        Store?       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants     Variant[]
  assignments  Assignment[]
  exposures    Exposure[]

  @@map("experiments")
}

model Variant {
  id           String   @id @default(cuid())
  experimentId String
  key          String
  name         String
  weight       Int      @default(50) // Weight percentage (0-100)
  configJson   String   // JSON configuration
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  experiment  Experiment   @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  exposures   Exposure[]

  @@unique([experimentId, key])
  @@map("variants")
}

model Assignment {
  id           String   @id @default(cuid())
  experimentId String
  subjectKey   String   // customerId || sessionId || anonId
  variantId    String
  storeId      String
  orgId        String
  createdAt    DateTime @default(now())

  // Relations
  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant    Variant    @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([experimentId, subjectKey])
  @@map("assignments")
}

model Exposure {
  id           String   @id @default(cuid())
  experimentId String
  variantId    String
  subjectKey   String
  surface      String   // hydrogen, theme, api, etc.
  storeId      String
  orgId        String
  ts           DateTime @default(now())

  // Relations
  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  variant    Variant    @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("exposures")
}

model AudienceSegment {
  id        String   @id @default(cuid())
  name      String
  criteria  String   // JSON string
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("audience_segments")
}

model CreativeAsset {
  id        String   @id @default(cuid())
  type      String
  url       String
  metadata  String?  // JSON string
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("creative_assets")
}

model FeedConfig {
  id        String   @id @default(cuid())
  name      String
  type      String
  config    String   // JSON string
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("feed_configs")
}

model Job {
  id        String   @id @default(cuid())
  type      String
  status    String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED, CANCELLED
  payload   String   // JSON string
  result    String?  // JSON string
  error     String?
  attempts  Int      @default(0)
  maxAttempts Int    @default(3)
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("jobs")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  topic     String
  payload   String   // JSON string
  processed Boolean  @default(false)
  storeId   String
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("webhook_events")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  resourceId String?
  changes   String?  // JSON string
  userId    String?
  storeId   String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Plan {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  price       Float
  currency    String   @default("USD")
  interval    String   @default("month") // month, year
  features    String   // JSON array of features
  limits      String?  // JSON object with usage limits
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                String   @id @default(cuid())
  organizationId    String
  planId            String
  shopifyBillingId  String?  // Shopify billing ID
  stripeCustomerId  String?  // Stripe customer ID
  status            String   @default("TRIAL") // TRIAL, ACTIVE, PAST_DUE, CANCELLED, EXPIRED
  trialEndsAt       DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  cancelledAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])
  usageRecords UsageRecord[]

  @@unique([organizationId])
  @@map("subscriptions")
}

model UsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  metric         String   // api_calls, widget_views, etc.
  quantity       Int
  timestamp      DateTime @default(now())
  metadata       String?  // JSON string with additional data

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

model BillingWebhook {
  id        String   @id @default(cuid())
  source    String   // shopify, stripe
  eventType String
  payload   String   // JSON string
  processed Boolean  @default(false)
  processedAt DateTime?
  createdAt DateTime @default(now())

  @@map("billing_webhooks")
}