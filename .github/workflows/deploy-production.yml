name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Pre-deployment checks
  pre-deployment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check deployment conditions
        id: check
        run: |
          # Check if this is a main branch push or manual dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # Quality gates
  quality-gates:
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm typecheck

      - name: Linting
        run: pnpm lint

      - name: Format checking
        run: pnpm format:check

      - name: Security audit
        run: pnpm audit --audit-level moderate

      - name: Run tests
        run: pnpm test

      - name: Build all packages
        run: pnpm build

      - name: Performance budget check
        run: |
          # Check bundle sizes
          find . -name "*.js" -path "*/dist/*" -exec sh -c 'echo "Bundle: $1, Size: $(wc -c < "$1") bytes"' _ {} \; | \
          awk '$NF > 1048576 { print "ERROR: Bundle too large:", $0; exit 1 }' || true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  # Build and test
  build:
    runs-on: ubuntu-latest
    needs: [pre-deployment, quality-gates]
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Generate image tag
        id: meta
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IMAGE_TAG="${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          else
            IMAGE_TAG="production-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          fi
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTRY_URL }}/tokpulse:${{ steps.meta.outputs.image-tag }}
            ${{ secrets.CONTAINER_REGISTRY_URL }}/tokpulse:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build]
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify database health
        run: |
          # Wait for database to be ready
          sleep 10
          # Run a simple query to verify connection
          pnpm db:generate
          echo "Database migration completed successfully"

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, migrate-database]
    if: needs.pre-deployment.outputs.environment == 'staging'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be Kubernetes, Docker Swarm, or cloud platform specific

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deployment, build, migrate-database]
    if: needs.pre-deployment.outputs.environment == 'production'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This could be Kubernetes, Docker Swarm, or cloud platform specific

  # Post-deployment verification
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          # Check health endpoints
          curl -f ${{ secrets.APP_URL }}/health || exit 1
          curl -f ${{ secrets.APP_URL }}/ready || exit 1

      - name: Performance check
        run: |
          # Check performance endpoints
          curl -f ${{ secrets.APP_URL }}/performance/status || exit 1

      - name: Security check
        run: |
          # Check security endpoints
          curl -f ${{ secrets.APP_URL }}/security/status || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notification logic here

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [post-deployment]
    if: failure()
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment..."
          # Add rollback logic here
          # This should revert to the previous working version

      - name: Verify rollback
        run: |
          # Verify rollback was successful
          curl -f ${{ secrets.APP_URL }}/health || exit 1

      - name: Notify rollback
        run: |
          echo "üîÑ Rollback completed"
          # Add rollback notification logic here